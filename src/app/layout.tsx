"use client";
import React, { useCallback, useEffect } from "react";
import { Provider, useDispatch } from "react-redux";
import BasicLayout from "@/layouts/BasicLayout";
import store, { AppDispatch } from "@/stores";
import { AntdRegistry } from "@ant-design/nextjs-registry";
import { getLoginUserUsingGet } from "@/api/userController";
import AccessLayout from "@/access/AccessLayout";
import { setLoginUser } from "@/stores/loginUser";
import "./globals.css";

// import type { Metadata } from "next";
// export const metadata: Metadata = {
//   title: "亦忻面试刷题平台", // 网页标题描述
//   description: "Generated by create next app",
// };

/**
 * 全局初始化逻辑
 * @param children
 * @constructor
 */
const InitLayout: React.FC<
  Readonly<{
    children: React.ReactNode;
  }>
> = ({ children }) => {
  const disPatch = useDispatch<AppDispatch>();
  // 初始化全局用户状态
  const doInitLoginUser = useCallback(async () => {
    const res = await getLoginUserUsingGet();
    if (res.data) {
      // 更新全局用户状态
      disPatch(setLoginUser(res.data));
    } else {
      // 模拟登陆,仅用于测试
      // setTimeout(() => {
      //   const testuser = {
      //     userName: "测试登陆",
      //     id: 1,
      //     userAvatar: "/assets/logo.png",
      //     userRole: ACCESS_ENUM.ADMIN,
      //   };
      //   disPatch(setLoginUser(testuser));
      // }, 3000);
    }
  }, []);

  // 只执行一次
  useEffect(() => {
    doInitLoginUser();
  }, []);

  return children;
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  // window.location.href = "https://theajack.github.io/disable-devtool/404.html?h=www.interview.cannianyixin.cn";
  useEffect(() => {
    // 检测开发者工具是否被打开
    function redirect404() {
      window.location.href = "https://theajack.github.io/disable-devtool/404.html?h=www.interview.cannianyixin.cn";
    }

    // 定义一个变量来存储定时器的引用
    let handler: number | undefined;

    // 定义一个函数来检测开发者工具是否被打开
    function detectDevTools() {
      handler = setInterval(() => {
        const before = new Date();
        debugger; // 触发调试器
        const after = new Date();
        const cost = after.getTime() - before.getTime();
        if (cost > 3000) {
          redirect404();
          clearInterval(handler); // 清除定时器
        }
      }, 1000);
    }

    // 调用检测函数
    detectDevTools();

    // 清理定时器
    return () => {
      if (handler) {
        clearInterval(handler); // 确保在组件卸载时清除定时器
      }
    };
  }, []);
  return (
    <html lang="zh">
      <body>
        <AntdRegistry>
          <Provider store={store}>
            <InitLayout>
              <BasicLayout>
                <AccessLayout>{children}</AccessLayout>
              </BasicLayout>
            </InitLayout>
          </Provider>
        </AntdRegistry>
      </body>
    </html>
  );
}
